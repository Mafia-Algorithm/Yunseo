// t분 동안 처리할 수 있는 인원
// ⚠️ answer과 mid를 따로 둘 것
// ⚠️ 누적합을 구하는 과정에서 범위를 충분히 넘어가면 break

import Foundation

func solution(_ n:Int, _ times:[Int]) -> Int64 {
    var left: Int64 = 1                  // 최소 시간
    var right: Int64 = Int64.max - 1     // 최대 시간
    var times = times.map{Int64($0)}     // 주어진 times 배열의 형변환
    
    var answer: Int64 = 0
    var passCount: Int64 = 0             // mid 시간 동안 심사할 수 있는 사람 수
    
    while left <= right {
        let mid = (left + right) / 2
        passCount = 0
        
        // answer 의 시간 동안 심사할 수 있는 사람 수
        for t in times {
            if passCount >= n {          // t = 1이고 손님의 수가 10억명 이상이면 오버플로우 발생 가능성 있음
                break
            }
            passCount += mid / t
        }
        
        if passCount >= n {               // 기준에 충족하면 시간 줄임
            answer = mid
            right = mid - 1
        } else if passCount < n {         // 기준에 미달이면 시간 늘림
            left = mid + 1
        }
    }
    
    return answer
}
